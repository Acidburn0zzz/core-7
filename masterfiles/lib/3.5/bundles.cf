############################################################################
#  Copyright (C) Cfengine AS
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License LGPL as published by the
#  Free Software Foundation; version 3.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  To the extent this program is licensed as part of the Enterprise
#  versions of Cfengine, the applicable Commerical Open Source License
#  (COSL) may apply to this file if you as a licensee so wish it. See
#  included file COSL.txt.
###########################################################################
#
# Cfengine Community Open Promise-Body Library
#
# This initiative started by Cfengine promotes a
# standardized set of names and promise specifications
# for template functionality within Cfengine 3.
#
# The aim is to promote an industry standard for
# naming of configuration patterns, leading to a
# de facto middleware of standardized syntax.
#
# Names should be intuitive and parameters should be
# minimal to assist readability and comprehensibility.

# Contributions to this file are voluntarily given to
# the cfengine community, and are moderated by Cfengine.
# No liability or warranty for misuse is implied.
#
# If you add to this file, please try to make the
# contributions "self-documenting". Comments made
# after the bundle/body statement are retained in
# the online docs
#

# For Cfengine Core: 3.5.1 to 3.5.x
# Bundles

###################################################
# If you find Cfengine useful, please consider    #
# purchasing a commercial version of the software.#
###################################################

###################################################
# agent bundles
###################################################

bundle agent cronjob(commands,user,hours,mins)

 # For adding lines to crontab for a user
 # methods:
 #  "cron" usebundle => cronjob("/bin/ls","mark","*","5,10");

{
vars:
  SuSE::
   "crontab" string => "/var/spool/cron/tabs";
  redhat|fedora::
   "crontab" string => "/var/spool/cron";
  freebsd::
   "crontab" string => "/var/cron/tabs";
 !(SuSE|redhat|fedora|freebsd)::
    "crontab" string => "/var/spool/cron/crontabs";

files:

!windows::
  "$(crontab)/$(user)"

    comment => "A user's regular batch jobs are added to this file",
     create => "true",
  edit_line => append_if_no_line("$(mins) $(hours) * * * $(commands)"),
      perms => mo("600","$(user)"),
    classes => if_repaired("changed_crontab");

processes:

changed_crontab::
   "cron"
         comment => "Most crons need to be huped after file changes",
         signals => { "hup" };

}

# this is a workaround for the issue that recurse_with_base precludes
# a file from being deleted
bundle agent rm_rf(name)
{
  classes:
      "isdir" expression => isdir($(name));
  files:
    isdir::
      "$(name)"
      file_select => all,
      depth_search => recurse_with_base(999),
      delete => tidy;

    !isdir::
      "$(name)" delete => tidy;
}

bundle agent fileinfo(f)
{
  vars:
      "fields" slist => splitstring("size,gid,uid,ino,nlink,ctime,atime,mtime,mode,modeoct,permstr,permoct,type,devno,dev_minor,dev_major,basename,dirname", ",", 999);

      "stat[$(f)][$(fields)]" string => filestat($(f), $(fields));

  reports:
    verbose_mode::
      "$(this.bundle): file $(f) has $(fields) = $(stat[$(f)][$(fields)])";
}

bundle agent tcdb_fix
# @brief Optimize tcdb and repair tcdb corruption
#
# **Example**:
# ```cf3
# methods:
#   "Manage Tokyo Cabinet Corruption"
#     usebundle => tcdb_fix,
#     handle => "main_methods_tcdb_fix",
#     comment => "Optimize/Repair or regenerate corrupt tcdb files";
# ```
# This bundle works around corruption issues with Tokyo Cabinet database files
# in CFEngine 3.5. Find all tcdb files in $(sys.workdir) and run tchmgr
# optimize on them. If any invalid record headers are found we remove the
# affected database so that it can be re-created. This occurs hourly based on
# `splayclass` and assumes a 5 minute agent execution interval.
{
  vars:

    linux::
      "db" slist => splitstring( execresult("/usr/bin/find $(sys.workdir) -name '*.tcdb' 2>/dev/null", "useshell"), "\n", "1000");


  classes:

      # NOTE: assumes that CFEngine is set to run every 5 minutes
      "hourly_class" expression => splayclass("$(sys.host)$(sys.ipv4)", "hourly");

    hourly_class.linux::
      "detected_invalid_record_$(db)" expression => returnszero("/var/cfengine/bin/tchmgr optimize $(db) 2>&1 | grep -q 'invalid record header'", "useshell");


  commands:

      "$(paths.rm)"
        args => "-f $(db)",
        ifvarclass => canonify("detected_invalid_record_$(db)"),
        classes => scoped_classes_generic("bundle", "absent_$(db)"),
        handle => "fix_tcdb_commands_detected_invalid_record_rm_$(db)",
        comment => "Invalid record headers indicate that the database corruption is beyond repair. It will be automatically re-created.";


  reports:

      "$(this.bundle) $(sys.fqhost): Detected invalid record header in $(db) - tried to repair"
        ifvarclass => canonify("detected_invalid_record_$(db)");

      "$(this.bundle) $(sys.fqhost): Repair failed, removed corrupt database: $(db)"
        ifvarclass => canonify("absent_$(db)_repaired");
}

