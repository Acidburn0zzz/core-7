
Files promises are an umbrella concept for all attributes of files. 
Operations fall basically into three categories: create, delete and
edit. 

@cartouche
@smallexample

 files:

   "@var{/path/file_object}"

       perms => @var{perms_body},
       ... ;

@end smallexample
@end cartouche

Prior to version 3, file promises were scattered into many different
types such as @code{files}, @code{tidy}, @code{copy}, @code{links},
etc.  File handling in CFEngine 3 uses regular expressions everywhere for pattern
matching. The old `wildcard/globbing' expressions @samp{*} and
@samp{?}  are deprecated, and everything is based consistently on Perl
Compatible Regular Expressions.

There is a natural ordering in file processing that obviates the need
for the actionsequence. The trick of using multiple actionsequence
items with different classes, e.g.

@verbatim
 actionsequence = ( ... files.one  ..  files.two )
@end verbatim

can now be handled more elegantly using bundles. The natural ordering 
uses that fact that some operations are mutually exclusive and that
some operations do not make sense in reverse order. For example,
editing a file and then copying onto it would be nonsense.
Similarly, you cannot both remove a file and rename it.

@noindent @b{File copying}

One of the first things users of CFEngine 2 will notice is that copying is now `backwards'.
Instead of the default object being source and the option being the destination,
in CFEngine 3 the destination is paramount and the source is an option.
This is because the model of voluntary cooperation tells us that it is the
object that is changed which is the agent making the promise. One cannot
force change onto a destination with CFEngine, one can only invite change from
a source.

@noindent @b{Normal ordering of promise attributes}

CFEngine 3 no longer has an `action sequence'. Ordering of operations has,
in most cases, a natural ordering which is assumed by the agent. For instance:
`delete then create' (normal ordering) makes sense, but
`create then delete' does not. This sort of principle can be extended to
deal with all aspects of file promises.

The diagram below shows the ordering. Notice that the same ordering
applies regardless of file type (plain-file or directory).  Note also that
file editing is done "atomically" (see `File editing in CFEngine 3' for
important details).

@image{filelogic,10cm,,The normal ordering of file operators in CFEngine 3,png}

The pseudo-code for this logic is shown in the diagram and below:

@verbatim
 for each file promise-object
    {
    if (depth_search) 
      do 
        DepthSearch (HandleLeaf)
      else 
        (HandleLeaf)
      done
    }

 HandleLeaf()
   {
   Does leaf-file exist?

     NO:  create
     YES: rename,delete,touch, 

     do
      for all servers in {localhost, @(servers)}
         {
         if (server-will-provide)
            do
              if (depth_search)
                 embedded source-depth-search (use file source)
                 break
              else
                 (use file source)
                 break
              done
            done
         }
     done
      
   Do all links (always local)

   Check Permissions

   Do edits
   }

@end verbatim

@noindent @b{Depth searches (recursion) during searches}

In CFEngine 2 there was the concept of recursion during file
searches. Recursion is now called "depth-search". 
In addition, it was possible to specify
wildcards in the base-path for this search. CFEngine 3 replaces
the `globbing' symbols with standard regular expressions:

@verbatim

      CFEngine 2               CFEngine 3

/one/*/two/thr*/four    /one/.*/two/thr.*/four

@end verbatim

Note that this now means when searching for ``hidden'' files (files with names
starting with a `.') or files with specific extensions, you should take care to
escape the dot (e.g., @code{\.cshrc} or @code{.*\.txt} when you wish it to
mean a literal character and not the ``any character'' interpretation provided
by regular expression interpretation.
Note that when you do a recursive search, the files @file{'.'} and
@file{'..'} are never included in the matched files, even if the regular
expresion in the @samp{leaf_name} specifically allows them.

Note also the the filename @samp{/dir/ect/ory/.} is a special case used with
the @samp{create} attribute to indicate the directory named @samp{/dir/ect/ory}
and not any of the files under it.  If you really want to specify a regular
expression that matches any single-character filename, use
@samp{/dir/ect/ory/[\w\W]} as your promise regular expression (you can't use
@samp{/dir/ect/ory[^/]}, see below for an explanation.

When we talk about a depth search, it refers to a search for file
objects which starts from the one or more matched base-paths as shown
in the example above.

@noindent @b{Filenames and regular expressions}

CFEngine allows regular expressions within filenames, but only after first
doing some sanity checking to prevent some readily avoidable problems.  The
biggest rule you need to know about filenames and regular expressions is that
@i{all} regular expressions in filenames are bounded by directory separators,
and that each component expression is anchored between the directory separators
@xref{Anchored vs. unanchored regular expressions}.
In other words, CFEngine splits up any file paths into its component parts,
and then it evaluates any regular expressions at a component-level.

What this means is that the path @samp{/tmp/gar.*} will only match filenames
like @file{/tmp/gar}, @file{/tmp/garbage} and @file{/tmp/garden}.  It will
@i{not} match filename like @file{/tmp/gar/baz} (because even though the
@samp{.*} in a regular expression means "zero or more of any character",
CFEngine restricts that to mean "zero or more of any character @i{in a path
component}").  Correspondingly, CFEngine
also restricts where you can use the @samp{/} character (you can't use it
in a character class like @samp{[^/]} or in a parenthesized or repeated
regular expression component.

This means that regular expressions which include "optional directory
components" won't work.  You can't have a files promise to tidy the directory
@samp{(/usr)?/tmp}.  Instead, you need to be more verbose and specify
@samp{/usr/tmp|/tmp}, or even better, think declaratively and create an
@i{slist} that contains both the strings @samp{/tmp} and @samp{/usr/tmp},
and then allow CFEngine to iterate over the list!

This also means that the path @samp{/tmp/.*/something} will match files like
@file{/tmp/abc/something} or @file{/tmp/xyzzy/something}.  However, even
though the pattern @samp{.*} means "zero or more of any character (except
@samp{/})", CFEngine matches files bounded by directory separators.  So even
though the pathname @file{/tmp//something} is technically the same as the
pathname @file{/tmp/something}, the regular expression @samp{/tmp/.*/something}
will @i{not} match on the degenerate case of @file{/tmp//something} (or
@file{/tmp/something}).

@noindent @b{Promises involving regular expressions}

CFEngine can only keep (or repair, or fail to keep) a promise on files which
actually exist.  If you make a promise based on a wildcard match, then the
promise is only ever attempted if the match succeeds.  However, if you make a
promise which includes a recursive search which includes a wildcard match,
then the promise can be kept or repaired (provided that the directory
specified in the promise exists).  Consider the following two examples,
(assuming that there first exist files named @file{/tmp/gar},
@file{/tmp/garbage} and @file{/tmp/garden}).  At first blush, the two
promises look like they should do the same thing, but there is a subtle
difference:

@verbatim
bundle agent foobaz		    bundle agent foobaz
{				    {
files:				    files:
 "/tmp/gar.*"			     "/tmp"
    delete => tidy,		    	delete => tidy,
    classes => if_ok("done");	    	depth_search => recurse("0"),
				    	file_select => gars,
				    	classes => if_ok("done");
				    }

				    body file_select gars
				    {
					leaf_name => { "gar.*" };
					file_result => "leaf_name";
				    }

body classes if_ok(x)		    body classes if_ok(x)
{				    {
promise_repaired => { "$(x)" };	    promise_repaired => { "$(x)" };
promise_kept => { "$(x)" };	    promise_kept => { "$(x)" };
}				    }
@end verbatim

In the first example, when the configuration containing this promise is first
executed, any file starting with "gar" that exists in the @samp{/tmp}
directory will be removed, and the @samp{done} class will be set.  However,
when the configuration is executed a second time, the pattern
@samp{/tmp/gar.*} will not match any files, and that promise will not even
be @i{attempted} (and, consequently the @samp{done} class will @i{not} be set).

In the second example, when the configuration containing this promise is first
executed, any file starting with "gar" that exists in the @samp{/tmp}
directory will also be removed, and the @samp{done} class will also be set.
The second time the configuration is executed, however, the promise on the
@samp{/tmp} directory will still be executed (because @samp{/tmp} of course
still exists), and the @samp{done} class @i{will} be set, because all files
matching the @samp{file_select} attribute have been deleted from that
directory.

@noindent @b{Local and remote searches}

There are two distinct kinds of depth
search:

@itemize
@item A local search over promiser agents.
@item A remote search over provider agents.
@end itemize

When we are @i{copying} or @i{linking} to a file source, it is the search over
the @i{remote} source that drives the content of a promise (the
promise is a promise to use what the remote source provides). In
general, the sources are on a different device to the images that make
the promises.  For all other promises, we search over existing local
objects.


If we specify depth search together with copy of a directory, then the
implied remote source search is assumed, and it is made after the
search over local base-path objects has been made. If you mix complex
promise body operations in a single prmose, this could lead to
confusion about the resulting behaviour, and a warning is issued. In
general it is not recommended to mix searches without a full
understanding of the consequences, but this might occasionally be
useful.

Depth search is not allowed with @code{edit_line} promises.

@noindent @b{File editing in CFEngine 3}

CFEngine 2 assumed that all files were line-edited, because it was
based on Unix traditions. Since then many new file formats have
emerged, including XML.  CFEngine 3 opens up the possibiltiy for
multiple models of file editing. Line based editing is still present and
is both much simplified and much more powerful than previously.

File editing is not just a single kind of promise but a whole range of
`promises within files'. It is therefore not merely a body to a single kind of
promise, but a bundle of sub-promises. After all, inside each file is a new
world of objects that can make promises, quite separate from files' external
attributes.

A typical file editing stanza has the elements in the following
example.


@verbatim
######################################################################
#
# File editing
#
######################################################################

body common control

{
version => "1.2.3";
bundlesequence  => { "outerbundle"  };
}

########################################################

bundle agent outerbundle

{
files:

  "/home/mark/tmp/cf3_test"

       create    => "true",     # Like autocreate in cf2
       edit_line => inner_bundle;
}

########################################################

bundle edit_line inner_bundle
  {
  vars:

   "who" string => "SysAdmin John";	# private variable in bundle

  insert_lines:
    "/* This file is maintained by CFEngine (see $(who) for details) */",
	location => first_line;
  
  replace_patterns:

   # replace shell comments with C comments

   "#(.*)"

      replace_with => C_comment,
     select_region => MySection("New section");

  reports:

    someclass::

      "This is file $(edit.filename)";
  }

########################################
# Bodies for the library ...
########################################

body replace_with C_comment

{
replace_value => "/* $(match.1) */"; # backreference
occurrences => "all";          # first, last all
}

########################################################

body select_region MySection(x)

{
select_start => "\[$(x)\]";
select_end => "\[.*\]";
}

########################################################

body location first_line

{
before_after => "before";
first_last => "first";
select_line_matching => ".*";
}


@end verbatim

@noindent There are several things to notice:

@itemize
@item 
The line-editing promises are all convergent promises about patterns within
the file. They have bodies, just like other attributes do and these allow us
to make simple templates about file editing while extending the power of the
basic primitives.

@item
All file edits specified in a single @code{edit_line} bundle are handled
"atomically".  CFEngine edits files like this:
@itemize
@item
CFEngine makes a copy of the file you you want to edit
@item
CFEngine makes all the edits in the @b{copy} of the file.  The filename is the
same as your original file with the extension @file{.cf-after-edit} appended.
@item
After all edits are complete (the @code{delete_lines}, @code{field_edits},
@code{insert_lines}, and finally @code{replace_patterns} promises), CFEngine
checks to see if the new file is the same as the original one.  If there are
no differences, the promises have converged, so it deletes the copy, and the
original is left completely unmodified.
@item
If there are any differences, CFEngine makes a copy of your original file with
the extension @file{.cf-before-edit} (so you always have the most recent backup
available), and then renames the edited version
to your original filename.
@end itemize
Because file rename is an atomic operation (guaranteed by the operating
system), any application program will either see the old version of the file
or the new one -- there is no "window of opportunity" where a partially edited
file can be seen (unless an application intentionally looks for the
@file{.cf-after-edit} file).  Problems during editing (such as disk-full or
permission errors) are likewise detected, and CFEngine will not rename a
partial file over your original.

@item 
All pattern matching is through perl compatible regular expressions
@item 
Editing takes place within a marked region (which defaults to the whole file
if not otherwise specified).
@item 
Search/replace functions now allow back-references.
@item 
The line edit model now contains a field or column model for dealing with tabular files such
as Unix @file{passwd} and @file{group} files. We can now apply powerful convergent editing operations
to single fields inside a table, to append, order and delete items from lists inside fields.

@item
The special variable @code{$(edit.filename)} contains the name of the file being edited within
an edit bundle.
@end itemize

@noindent In the example above, back references are used to allow conversion of comments from shell-style
to C-style.

