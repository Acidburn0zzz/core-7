
Methods offer powerful ways to encapsulate multiple issues pertaining
to a set of parameters.

Because a method is just an encapsulation, there is a subtlety about
how to interpret a successful method invocation. Before version 3.1.0,
a method was considered repaired if executed (like @code{commands}),
however this led to unnecessary logging of executions, even if not
actual encapsulated promise was kept.  In version 3.1.0 this has been 
changed so that a method promise is considered kept if the method
is expanded. A method promise is thus never considered repaired.

Starting from version 3.1.0, methods may be specified using variables.
Care should be exercised when using this approach. In order to make
the function call uniquely classified, CFEngine requires the promiser
to contain the variable name of the method if the variable is a list.

@verbatim
bundle agent default
{
vars:
    "m" slist  => { "x", "y" };
    "p" string => "myfunction";

methods:
    "set of $(m)" usebundle => $(m) ("one");
    "any"         usebundle => $(p)("two");
    
}
@end verbatim
