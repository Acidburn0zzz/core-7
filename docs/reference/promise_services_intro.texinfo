A service is a set of zero or more processes. It can be zero if the
service is not currently running. Services run in the background, and
do not require user intervention.

Service promises may be viewed as an abstraction of process and
commands promises. An important distinguiser is however that a single
service may consist of multiple processes. Additionally, services are
registered in the operating system in some way, and gets a unique
name. Unlike processes and commands promises, this makes it possible
to use the same name both when it is running and not.

Some operating systems are bundled with a lot of unused services that
are running as default. At the same time, faulty or inherently
insecure services are often the cause of security issues.  With
CFEngine Nova, one can create promises stating services that should be
stopped and disabled.

The operating system may start a service at boot time, or it can be
started by CFEngine. Either way, CFEngine will ensure that the service
maintains the correct state (started, stopped, or disabled). On some
operating systems, CFEngine also allows services to be started on
demand, i.e. when they are needed. This is implemented though the
@code{inetd} or @code{xinetd} daemon on Unix. Windows does not support
this.

CFEngine Nova also allows for the concept of dependencies between
services, and can automatically start or stop these, if
desired. Parameters can be passed to services that are started by
CFEngine.

