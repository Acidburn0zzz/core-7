
@cartouche
@verbatim

 vars:

  "match_package" slist => { 
                           "apache2", 
                           "apache2-mod_php5",
                           "apache2-prefork",
                           "php5" 
                           };
 packages:

    "$(match_package)"

         package_policy => "add",
         package_method => yum;

@end verbatim
@end cartouche


Software packaging is a core paradigm in operating system release
management today, and CFEngine supports a generic approach to
integration with native operating support for packaging.  Package
promises allow CFEngine to make promises the state of software
packages @i{conditionally}, given the assumption that a native package
manager will perform the actual manipulations. Since no agent can make
unconditional promises about another, this is the best that can be
achieved. 

Packages are treated as black-boxes with three labels: 

@itemize @bullet
@item A package name.
@item A version string.
@item An architecture name.
@end itemize

Package managers are treated as black boxes that may support some or all of the
following promise types:

@itemize @bullet
@item List installed packages
@item Add packages
@item Delete packages
@item Reinstall (repair) packages
@item Update packages
@item Patch packages
@item Verify packages
@end itemize

If these services are promised by a package manager, @code{cf-agent}
promises to use the service and encapsulate it within the overall
CFEngine framework. It is possible to set classes based on the return
code of a package-manager command in a very flexible way. See the
@code{kept_returncodes}, @code{repaired_returncodes} and
@code{failed_returncodes} attributes.


@b{Domain knowledge}

CFEngine does not maintain operating system specific expert knowledge
internally, rather it uses a generic model for dealing with promises about
packages (which depend on the behaviour of an external package manager).
The approach is to define package system details in body-constraints that
can be written once and for all, for each package system.

Package promises are like @code{commands} promises in the sense that
CFEngine promises nothing about the outcome of executing a
command. All it can promise is to interface with it, starting it and
using the results in good faith. Packages are basically `outsourced',
to invoke IT parlance.

The possibility of a CFEngine package format that enables more guaranteeable
behaviour for special purposes has not been excluded for the future,
but in any case @code{cf-agent} must support native package formats
used by operating system maintainers as these are a core part of modern
operating systems.

@b{Behaviour}

A package promise consists of a name, a version and an architecture, @i{(n,v,a)},
and behaviour to be promised about packages that match criteria based on these.
The components @i{(n,v,a)} can be determined in one of two different ways:

@itemize
@item They may be specified independently, e.g.

@verbatim
packages:

  "mypackage"

     package_policy => "add",
     package_method => rpm,
     package_select => ">=",
     package_architectures => { "x86_64", "i586" },
     package_version => "1.2.3";

@end verbatim

@item They may be extracted from a package identifier (promiser) or
filename, using pattern matching. For example, a promiser
``7-Zip-4.50-x86_64.msi'' and a package_method containing the following.

@verbatim
 package_name_regex => "^(\S+)-(\d+\.?)+";
 package_version_regex => "^\S+-((\d+\.?)+)";
 package_arch_regex => "^\S+-[\d\.]+-(.*).msi";
@end verbatim

@end itemize

When scanning a list of installed packages different managers present the information
@i{(n,v,a)} in quite different forms and pattern extraction is necessary. When making a
promise about a specific package, the CFEngine user may choose one or the other model.


@b{Smart and dumb package systems}

Package managers vary enormously in their capabilities and in the
kinds of promises they make. There are broadly two types

@itemize
@item Smart package systems tha resolve dependencies and require only a symbolic package name.
@item Dumb package managers that do not resolve dependencies and need filename input.
@end itemize



Normal ordering for packages is the following:

@itemize @bullet
@item Delete
@item Add
@item Update
@item Patch
@end itemize


@b{Promise repair logic}

We can discuss package promise repair in the following table.

@image{package-behaviour,14cm,,Promise repair logic for packages.,png}







