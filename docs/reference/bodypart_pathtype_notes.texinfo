By default, CFEngine makes an educated guess as to whether the promise
pathname involves a regular expression or not.  This guesswork is needed due
to cross-platform differences in filename interpretation.

If CFEngine guesses (or is told) that the pathname uses a regular
expression pattern, it will undertake a file search to find possible
matches. This can consume significant resources, and so the
@samp{guess} option will always try to optimize this. Guesswork is,
however, imperfect, so you have the option to declare your intention.

If the keyword @code{literal} is invoked, a path will be treated as a
literal string regardless of what characters is contains. If it is
declared @samp{regex}, it will be treated as a pattern to match.

Note that CFEngine splits the promiser up into path links before
matching, so that each link in the path chain is matched
separately. Thus it it meaningless to have a @samp{/} in a regular
expression, as the comparison will never see this character.

In the examples above, at least one case implies an iteration over all
files/directories matching the regular expression, while the last case
means a single literal object with a name composed of dots and stars.

Furthermore, on Windows paths using @code{regex} must use the forward slash
(@code{/}) as path separator, since the backward slash has a special meaning
in a regular expression. Literal paths may also use backslash (@code{\}) as a
path separator, @xref{Regular expressions in paths}, for more information.
