
The @code{action} settings allow general transaction control to be
implemented on promise verification. Action bodies place limits on how
often to verify the promise and what classes to raise in the case that
the promise can or cannot be kept.

Note that actions can be added to sub-bundles like methods and editing
bundles, and that promises within these do not inherit action settings
at higher levels. Thus, in the following example there are two levels
of action setting:

@verbatim
########################################################
#
# Warn if line matched
#
########################################################

body common control

{
bundlesequence  => { "testbundle" };
}

########################################################

bundle agent testbundle

{
files:

  "/var/cfengine/inputs/.*"

       edit_line => DeleteLinesMatching(".*cfenvd.*"),
       action => WarnOnly;
}

########################################################

bundle edit_line DeleteLinesMatching(regex)
  {
  delete_lines:

    "$(regex)" action => WarnOnly;

  }

########################################################

body action WarnOnly
{
action_policy => "warn";
}
@end verbatim

The @code{action} setting for the @code{files} promise means that file
edits will not be committed to disk, only warned about. This is a master-level
promise that overrides anything that happens during the editing. The
@code{action} setting for the edit bundle means that the internal
memory modelling of the file will only warn about changes rather than
committing them to the memory model. This makes little difference to the
end result, but it means that CFEngine will report

@smallexample
Need to delete line - ... - but only a warning was promised
@end smallexample

@noindent Instead of 

@smallexample
Deleting the prpomised line ...
Need to save file - but only a warning was promised
@end smallexample

@noindent In either case, no changes will be made to the disk, but the messages
given by @code{cf-agent} will differ.

