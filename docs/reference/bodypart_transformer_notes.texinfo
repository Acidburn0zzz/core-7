
A command to execute, usually for the promised file to transform it to
something else (but possibly to create the promised file based on a different
origin file).  The examples above show both types of promises.

The promiser file must exist in order to effect the transformer.

In the first example, the promise is made on the file that we wish to
transform.  If the promised file exists, the transformer will change the
file to a compressed version (and the next time CFEngine runs, the promised
file will no longer exist, because it now has the @samp{.gz} extension).

In the second example, the promise is made on the file @i{resulting from} the
transformation (and the promise is conditional on the original file being
newer than the result file).  In this case, we @i{must} specify  @samp{create
=> true}.  If we do not, then if the promised file is removed, the
transformer will not be executed.

Note also that if you use the @code{$(this.promiser)}
variable or other variable in this command, and the file object contains
spaces you should quote the variable, e.g.

@verbatim
    transformer => "/usr/bin/gzip \"$(this.promiser)\"",
@end verbatim

Note also that the transformer does not actually need to change the file.
You can, for example, simply report on the existence of files with

@verbatim
    transformer => "/bin/echo I found a file named $(this.promiser)",
@end verbatim

The file streams @code{stdout} and @code{stderr} are redirected by CFEngine, and
will not appear in any output unless you run @code{cf-agent} with the
@samp{-v} switch (or enable @code{verbose} in an @code{outputs}
promise).

It is possible to set classes based on the return code of a
transformer-command in in a very flexible way. See the
@code{kept_returncodes}, @code{repaired_returncodes} and
@code{failed_returncodes} attributes.

Finally, you should note that the command is not run in a shell - which means
that you cannot perform file redirection or create pipelines.
